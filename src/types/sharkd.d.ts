interface SharkdBaseRequest {
    method: string
}

interface SharkdLoadFileRequest extends SharkdBaseRequest {
    method: "load"
    file: string
}

interface SharkdLoadFileResponse {
    err: 0 | 2
}

interface SharkdCheckFilterRequest extends SharkdBaseRequest {
    method: "check",
    filter: string
}

interface SharkdCheckFilterResponse {
    status?: "OK",
    code?: number,
    message?: string
}

interface SharkdCompleteFieldRequest extends SharkdBaseRequest {
    method: "complete",
    field: string
}

interface SharkdCompleteFieldResponse {
    field: {
        f: string
        t: number
        n: string
    }[]
}

interface SharkdGetFramesRequest extends SharkdBaseRequest {
    method: "frames"
    skip: number
    limit: number
    filter: string
    // columnX: number | string
}

interface SharkdGetFrameTreeRequest extends SharkdBaseRequest {
    method: "frame"
    frame: number
    proto: boolean
    bytes: boolean
}

interface SharkdFrame {
    /** Values for each column. */
    c: string[]
    /** Frame number. */
    num: number
    /** Background Color in hex. */
    bg: string
    /** Foreground Color in hex. */
    fg: string
}

type SharkdByteRange = [number, number]

interface SharkdFrameResponse {
    err: number
    tree: SharkdFrameTreeNode[]
    bytes: string,
    byteRanges: SharkdByteRange[]
}

interface SharkdFrameTreeNode {
    /** Label */
    l: string
    /** Filter String */
    f: string
    /** If field is generated by Wireshark */
    g?: boolean
    /** Subtree ett index */
    e?: number
    /** Array of Subree Nodes */
    n?: SharkdFrameTreeNode[]
    /** Item start, Item length */
    h?: SharkdByteRange
    /** Severity */
    s?: "Chat" | "Note" | "Warning" | "Error"
}
